{
  "html": [
    {
      "id": 1,
      "text": "Какой тег используется для создания ссылки?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "<link>",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "<a>",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "<href>",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "<anchor>",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 2,
      "text": "Какой тег используется для вставки изображения?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "<img>",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "<picture>",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "<media>",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "<graphic>",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 3,
      "text": "Какой тег находится в <html> определяет заголовок документа?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "<head>",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "<header>",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "<title>",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "<meta>",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 4,
      "text": "Какой атрибут используется для определения альтернативного текста изображения?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "src",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "alt",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "title",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "href",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 5,
      "text": "Какой атрибут позволяет открыть ссылку в новой вкладке?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "target=_blank",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "target=blank",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "target=_self",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "target=_new",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 6,
      "text": "Для чего используется атрибут 'placeholder'?",
      "hasOptions": false,
      "answer": "Атрибут 'placeholder' используется для отображения текстовой подсказки или примера ввода в поле формы до того, как пользователь начнет вводить свои данные."
    },
    {
      "id": 7,
      "text": "Как создать непронумерованный список в HTML?",
      "hasOptions": false,
      "answer": "Для создания такого списка в HTML используется тег <code>ul</code>, а для определения каждого пункта списка - тег <code>li</code>."
    },
    {
      "id": 8,
      "text": "Что такое HTML?",
      "hasOptions": false,
      "answer": "HTML (HyperText Markup Language) - это стандартизированный язык разметки, который используется для создания и разработки веб-страниц. Это система для разметки отдельных частей веб-страницы с использованием тегов, заключенных в угловые скобки."
    },
    {
      "id": 9,
      "text": "Что делает тег <!DOCTYPE>?",
      "hasOptions": false,
      "answer": "`Это декларация, которая информирует веб-браузер о версии языка разметки, использованной при создании веб-страницы. Это помогает браузеру корректно отобразить страницу."
    },
    {
      "id": 10,
      "text": "Какой тег используется для создания таблицы?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "<table>",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "<grid>",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "<row>",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "<column>",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 11,
      "text": "Какой тег используется для создания заголовка таблицы?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "<caption>",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "<th>",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "<thead>",
          "isCorrect": true
        },
        {
          "id": 4,
          "text": "<title>",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 12,
      "text": "Какой тег используется для создания строки таблицы?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "<td>",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "<row>",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "<line>",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "<tr>",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 13,
      "text": "Какой тег используется для создания ячейки таблицы?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "<cell>",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "<tr>",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "<th>",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "<td>",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 14,
      "text": "Что такое семантические теги в HTML?",
      "hasOptions": false,
      "answer": "Семантические теги в HTML - это теги, которые передают информацию о смысле или назначении содержимого, а не только о его внешнем виде. Примеры семантических тегов: header, footer, article, section, nav и др. Они помогают создавать более структурированные и доступные веб-страницы."
    },
    {
      "id": 15,
      "text": "Какой атрибут используется для установки фонового изображения?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "background",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "background-color",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "bgcolor",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "background-image",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 16,
      "text": "Какой тег используется для создания выпадающего списка?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "<dropdown>",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "<list>",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "<select>",
          "isCorrect": true
        },
        {
          "id": 4,
          "text": "<option>",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 17,
      "text": "Какой тег используется для вставки JavaScript кода в HTML документ?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "<javascript>",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "<script>",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "<js>",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "<java>",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 18,
      "text": "Какой атрибут используется для указания пути к изображению?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "src",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "href",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "path",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "url",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 19,
      "text": "Что делает атрибут 'readonly' в элементе формы?",
      "hasOptions": false,
      "answer": "Атрибут 'readonly' делает элемент формы только для чтения, что значит, что пользователь не может изменять значение элемента, но может просматривать его. Это может быть полезно, если вы хотите отобразить информацию, которая не должна быть изменена."
    },
    {
      "id": 20,
      "text": "Что такое веб-стандарты и зачем они нужны?",
      "hasOptions": false,
      "answer": "Веб-стандарты - это рекомендации, разработанные группами стандартов, такими как W3C или WHATWG, для обеспечения совместимости и устойчивости веб-технологий. Они включают рекомендации по HTML, CSS, JavaScript и другим веб-технологиям. Соблюдение веб-стандартов помогает обеспечить корректную работу веб-страниц в различных браузерах и устройствах, а также облегчить обслуживание и расширение веб-сайтов в будущем."
    },
    {
      "id": 21,
      "text": "Что такое отзывчивый (responsive) веб-дизайн?",
      "hasOptions": false,
      "answer": "Это подход к веб-дизайну, который позволяет веб-страницам корректно отображаться и функционировать на различных устройствах, включая мобильные телефоны, планшеты и настольные компьютеры, путем использования гибких макетов, гибких изображений и CSS медиазапросов для адаптации дизайна к различным размерам экрана и характеристикам устройств."
    },
    {
      "id": 22,
      "text": "Какой тег HTML используется для вставки видео?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "<media>",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "<video>",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "<movie>",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "<multimedia>",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 23,
      "text": "Какой тег используется для создания главного заголовка на веб-странице?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "<h1>",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "<header>",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "<title>",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "<head>",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 24,
      "text": "Что делает тег <br>?",
      "hasOptions": false,
      "answer": "Он спользуется для переноса строки, что позволяет создать новую строку в том месте, где он размещен. Это удобный способ управления расположением текста на веб-странице без использования дополнительных стилей или элементов."
    },
    {
      "id": 25,
      "text": "Какой тег используется для создания упорядоченного списка?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "<ul>",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "<ol>",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "<li>",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "<list>",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 26,
      "text": "Что такое DOM в контексте веб-разработки?",
      "hasOptions": false,
      "answer": "DOM (Document Object Model) - это программный интерфейс для веб-документов. Это представление структурированного документа в виде объектной модели, которое позволяет программам и скриптам взаимодействовать с содержимым, структурой и стилями веб-страницы. DOM представляет документ как дерево объектов, каждый из которых соответствует части страницы."
    },
    {
      "id": 27,
      "text": "Какой атрибут используется для определения стилей элемента на странице?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "style",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "css",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "styles",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "stylesheet",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 28,
      "text": "Что такое атрибут 'alt' в теге <img>?",
      "hasOptions": false,
      "answer": "Он используется для предоставления альтернативного текста, который будет отображаться в случае, если изображение не может быть загружено. Это также может быть полезно для обеспечения доступности, поскольку скрин-ридеры могут использовать этот текст для описания изображения пользователям с ограниченными возможностями."
    }
  ],
  "css": [
    {
      "id": 1,
      "text": "В чем разница между «сбросом» и «нормализацией» CSS? Что бы вы выбрали и почему?",
      "hasOptions": false,
      "answer": "Сброс (reset) сбрасывает все встроенные в браузер стили элементов. Normalize приводит стили к единому виду во всех браузерах. Лучше использовать Normalize из-за кроссбраузерности."
    },
    {
      "id": 2,
      "text": "Что такое специфичность селекторов CSS и как она работает?",
      "hasOptions": false,
      "answer": "Специфичность селектора (еще называют весом) это свойство определяющее приоритет стилевого правила, то есть то, какой стиль будет применен к HTML элементу в итоге. Например, используя какую-нибудь UI библиотеку, элементам этой библиотеки будут применены правила заданные авторами по умолчанию. При необходимости можно поменять стили на свои, «перебив» дефолтные более специфичным селектором.\n\nПодробнее тут: <a href='https://developer.mozilla.org/ru/docs/Web/CSS/Specificity' target='_blank'>Специфичность (MDN)</a>"
    },
    {
      "id": 3,
      "text": "Что такое CSS?",
      "hasOptions": false,
      "answer": "CSS (Cascading Style Sheets) - это язык стилей, используемый для описания внешнего вида и форматирования документа, написанного на языке разметки, таком как HTML. CSS позволяет разработчикам управлять макетом, шрифтами, цветами и другими стилистическими аспектами веб-страницы."
    },
    {
      "id": 4,
      "text": "Почему, как правило, лучше разместить подключение CSS в <head>, а <script> перед тэгом </body>? Знаете ли вы какие-либо исключения, приведите примеры?",
      "hasOptions": false,
      "answer": "Стили рекомендуется подключать в head для того, чтобы страница как можно быстрее приняла свой внешний вид. Скрипты подключенные в head могут затормозить этот процесс, в связи с этим их рекомендуется подключать перед закрывающим тегом body. Исключением являются скрипты аналитики, для определения количества посетителей, которые не дождались загрузки страницы. В этом случае скрипт должен быть подключен в head."
    },
    {
      "id": 5,
      "text": "Что делает свойство 'z-index' в CSS?",
      "hasOptions": false,
      "answer": "Свойство 'z-index' в CSS контролирует стековый порядок элементов по оси Z. Элемент с большим значением 'z-index' будет отображаться поверх элемента с меньшим значением 'z-index'."
    },
    {
      "id": 6,
      "text": "Какие есть способы отцентровать div?",
      "hasOptions": false,
      "answer": "Существует несколько способов отцентровать div в CSS, вот некоторые из них: \n1. Использование свойств margin и auto: `margin: 0 auto;`.\n2. Использование Flexbox: `display: flex; justify-content: center; align-items: center;`.\n3. Использование Grid Layout: `display: grid; place-items: center;`.\n4. Использование свойств text-align и inline-block: `text-align: center;` на родительском элементе и `display: inline-block;` на самом div.`."
    },
    {
      "id": 7,
      "text": "Какое свойство используется для установки цвета фона?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "color",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "background-color",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "bgcolor",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "background",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 8,
      "text": "Какое свойство позволяет установить внешние отступы элемента?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "padding",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "border",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "margin",
          "isCorrect": true
        },
        {
          "id": 4,
          "text": "spacing",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 9,
      "text": "Какое свойство используется для установки шрифта?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "font-weight",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "font-style",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "text-font",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "font-family",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 10,
      "text": "Какое свойство CSS позволяет контролировать видимость элемента в DOM, но при этом сохраняет его место?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "display: none",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "visibility: hidden",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "is-visible: 0",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "color: transparent",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 11,
      "text": "Какое свойство CSS используется для установки теней элементов?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "box-shadow",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "text-shadow",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "shadow",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "border-shadow",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 12,
      "text": "Какой селектор выбирает все элементы .child, которые являются непосредственными дочерними элементами .parent?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": ".parent + .child",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": ".parent ~ .child",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": ".parent > .child",
          "isCorrect": true
        },
        {
          "id": 4,
          "text": ".parent .child",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 13,
      "text": "Какой селектор CSS выбирает все элементы, которые имеют указанный атрибут, начинающийся с определенной строки?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "[attr=value]",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "[attr~=value]",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "[attr|=value]",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "[attr^=value]",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 14,
      "text": "Какой селектор CSS выбирает все элементы, которые имеют указанный атрибут, заканчивающийся определенной строкой?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "[attr=value]",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "[attr~=value]",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "[attr|=value]",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "[attr$=value]",
          "isCorrect": true
        }
      ]
    }
  ],
  "js": [
    {
      "id": 1,
      "text": "Что такое чистая функция?",
      "hasOptions": false,
      "answer": "Это функция, которая возвращает одинаковый результат, когда вызывается с одним и тем же набором аргументов, а также не имеет побочных эффектов (side effects)"
    },
    {
      "id": 2,
      "text": "Что такое замыкание?",
      "hasOptions": false,
      "answer": "Замыкания – это способность функции запоминать лексическое окружение, в котором она была создана, то есть хранить в себе ссылку на это окружение и обращаться к нему.\n\n<a href='https://youtu.be/mI6Jcfsgma4?si=46DV3mXPF6mDTTPs' target='_blank'>Подробнейшее видео про замыкание</a>"
    },
    {
      "id": 3,
      "text": "let VS const: почему лучше использовать const, когда это возможно?",
      "hasOptions": false,
      "answer": "Использование const дает два преимущества:\n1) Безопасность: объявление переменных через const защищает от неожиданного изменения значения переменной в коде, что может часто приводит к ошибкам и неожиданному поведению программы.\n2) Читаемость: использование const позволяет читателю кода понимать, что значение переменной не будет изменяться в течение выполнения программы. Это делает код более понятным и уменьшает возможность ошибок.\n\nПодробнее: <a href='https://youtu.be/07FllcTRj84?si=q7v60ZvHYBoRSSen' target='_blank'>Видео про VAR/LET/CONST</a>"
    },
    {
      "id": 4,
      "text": "Что такое промисы (Promises) в JavaScript?",
      "hasOptions": false,
      "answer": "Промисы – это объекты, которые представляют результат асинхронной операции. Они могут находиться в одном из трех состояний: ожидание (pending), выполнено (fulfilled) или отклонено (rejected)."
    },
    {
      "id": 5,
      "text": "Что такое деструктуризация в JavaScript?",
      "hasOptions": false,
      "answer": "Деструктуризация позволяет извлекать отдельные свойства из объектов или элементы из массивов и присваивать их переменным в более удобной форме. Например, вот так мы можем одной строкой извлечь имя и адрес пользователя из объекта user:\n<code>const {name, address} = user;</code>"
    },
    {
      "id": 6,
      "text": "Что такое стрелочные функции в JavaScript?",
      "hasOptions": false,
      "answer": "Стрелочные функции — это синтаксически компактный способ записи функций в JavaScript, который не имеет своего собственного 'this'. Они часто используются для создания анонимных функций.\n\n<a href='https://youtu.be/nGVYdna4kq4?si=1k0J9F-MYxWCaq6M' target='_blank'>Подробное видео про функции в JS</a>"
    },
    {
      "id": 7,
      "text": "Что такое hoisting в JavaScript?",
      "hasOptions": false,
      "answer": "Hoisting — это механизм в JavaScript, при котором переменные и объявления функций перемещаются на верх своей области видимости перед выполнением кода."
    },
    {
      "id": 8,
      "text": "Какой метод используется для добавления элемента в массив?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "splice()",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "pop()",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "shift()",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "push()",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 9,
      "text": "Какой объект представляет текущее окно браузера?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "document",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "screen",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "window",
          "isCorrect": true
        },
        {
          "id": 4,
          "text": "browser",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 10,
      "text": "Какой оператор используется для сравнения на строгое равенство?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "==",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "===",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "=",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "!==",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 11,
      "text": "Какой метод используется для удаления последнего элемента из массива?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "splice()",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "pop()",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "shift()",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "push()",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 12,
      "text": "Какой метод в JavaScript используется для преобразования объекта в строку JSON?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "JSON.stringify()",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "JSON.parse()",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "JSON.toText()",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "JSON.toString()",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 13,
      "text": "Какой объект в JavaScript используется для работы с датой и временем?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Time",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Date",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "Calendar",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "DateTime",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 14,
      "text": "Какой метод массива в JavaScript используется для фильтрации элементов по определенному критерию?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "map()",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "filter()",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "reduce()",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "forEach()",
          "isCorrect": false
        }
      ]
    }
  ],
  "ts": [
    {
      "id": 1,
      "text": "Что такое TypeScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Версия JavaScript",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Статически типизированный язык программирования",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "Язык для создания игр",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Язык для фронтенд-разработки",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 2,
      "text": "Чем TypeScript отличается от JavaScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "JavaScript и TypeScript идентичны",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "TypeScript предоставляет статическую типизацию",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "JavaScript предоставляет статическую типизацию",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "TypeScript не поддерживает объектно-ориентированное программирование",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 3,
      "text": "Как объявить переменную с явным типом в TypeScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "const x = 10",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "let x: number = 10",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "var x = 10",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "x: number = 10",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 4,
      "text": "Что такое интерфейс в TypeScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Абстрактный класс",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Описание структуры объекта",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "Функция в TypeScript",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Класс для наследования",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 5,
      "text": "Какие типы данных поддерживает TypeScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "number, string, boolean",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "array, object, function",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "date, enum, any",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "map, set, symbol",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 6,
      "text": "Что такое generic types в TypeScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Типы данных для работы с базами данных",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Обобщенные типы для работы с различными типами данных",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "Типы данных для работы с файлами",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Типы данных для работы с сетью",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 7,
      "text": "Как объявить функцию с типами аргументов и возвращаемого значения в TypeScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "function add(x, y) { return x + y; }",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "function add(x: number, y: number): number { return x + y; }",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "function add(x: number, y: number) { return x + y; }",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "const add = (x: number, y: number) => x + y;",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 8,
      "text": "Как объявить массив с явным типом элементов в TypeScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "const numbers = [1, 2, 3];",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "const numbers: number[] = [1, 2, 3];",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "const numbers: Array<number> = [1, 2, 3];",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "const numbers: array = [1, 2, 3];",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 9,
      "text": "Какой тип данных используется для отсутствующего значения (null или undefined) в TypeScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "void",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "null",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "undefined",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "null или undefined",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 10,
      "text": "Какие ключевые слова используются для определения доступности полей и методов в TypeScript классах?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "private, protected, public",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "var, let, const",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "readonly, static, final",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "interface, implements, extends",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 11,
      "text": "Как определить тип данных объекта в TypeScript?",
      "hasOptions": false,
      "answer": "Вы можете определить тип данных объекта в TypeScript с использованием интерфейсов или типов (type). Например, 'interface Person { name: string; age: number; }'."
    },
    {
      "id": 12,
      "text": "Какие ключевые слова используются для объявления функций в TypeScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "function",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "func",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "fn",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "method",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 13,
      "text": "Как определить тип данных массива в TypeScript?",
      "hasOptions": false,
      "answer": "Вы можете определить тип данных массива в TypeScript, используя синтаксис 'type[]' или 'Array<type>'. Например, 'number[]' или 'Array<string>'."
    },
    {
      "id": 14,
      "text": "Что такое декораторы (decorators) в TypeScript?",
      "hasOptions": false,
      "answer": "Декораторы в TypeScript - это специальные функции, которые позволяют добавить метаданные к классам, методам и свойствам. Они используются, например, для аннотации классов и определения маршрутов в Angular."
    },
    {
      "id": 15,
      "text": "Что такое async/await в TypeScript?",
      "hasOptions": false,
      "answer": "Async/await - это синтаксический сахар в TypeScript, который упрощает работу с асинхронными операциями. Он позволяет писать асинхронный код более читаемо и понятно."
    },
    {
      "id": 16,
      "text": "Как объявить константу (immutable variable) в TypeScript?",
      "hasOptions": false,
      "answer": "Для объявления константы в TypeScript, используйте ключевое слово 'const', например, 'const pi = 3.1415;'."
    },
    {
      "id": 17,
      "text": "Что такое промисы (promises) в TypeScript и как они работают?",
      "hasOptions": false,
      "answer": "Промисы в TypeScript - это объекты, представляющие асинхронное выполнение операции. Они имеют состояния (pending, resolved, rejected) и позволяют обрабатывать асинхронный код более структурировано."
    },
    {
      "id": 18,
      "text": "Какие ключевые слова используются для определения классов в TypeScript?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "class",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "cls",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "type",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "struct",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 19,
      "text": "Что такое транспиляция (transpilation) в TypeScript и для чего она нужна?",
      "hasOptions": false,
      "answer": "Транспиляция (transpilation) в TypeScript - это процесс преобразования кода TypeScript в код JavaScript, который может быть выполнен браузером. Это необходимо для поддержки всех браузеров и версий JavaScript."
    },
    {
      "id": 20,
      "text": "Как определить обязательное (required) свойство в интерфейсе (interface) TypeScript?",
      "hasOptions": false,
      "answer": "Для определения обязательного свойства в интерфейсе TypeScript, вы можете добавить символ '?' после имени свойства. Например, 'interface Person { name: string; age?: number; }'."
    }
  ],
  "angular": [
    {
      "id": 1,
      "text": "Что такое Angular?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Фреймворк для разработки мобильных приложений.",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Фреймворк для разработки веб-приложений.",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "Язык программирования.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Игровая платформа.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 2,
      "text": "Чем отличается Angular от AngularJS?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Angular использует JavaScript, а AngularJS использует TypeScript.",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Angular предоставляет меньше инструментов для разработки.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Angular предоставляет более мощные инструменты и основан на TypeScript.",
          "isCorrect": true
        },
        {
          "id": 4,
          "text": "AngularJS более популярен.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 3,
      "text": "Что такое компоненты в Angular?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Элементы интерфейса пользователя, такие как кнопки и текстовые поля.",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Собранный файл приложения.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Базовые строительные блоки пользовательского интерфейса в Angular.",
          "isCorrect": true
        },
        {
          "id": 4,
          "text": "Серверная часть приложения.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 4,
      "text": "Что такое директивы в Angular?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Компоненты, отвечающие за внешний вид приложения.",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Инструкции в HTML, добавляющие определенное поведение к элементам DOM.",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "Сервисы, обеспечивающие инъекцию зависимостей.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Стили приложения.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 5,
      "text": "Что такое сервисы в Angular?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Классы, предназначенные для выполнения определенных функций в приложении.",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "HTML-шаблоны компонентов.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Компоненты, предоставляющие доступ к базе данных.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Элементы интерфейса пользователя.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 6,
      "text": "Что такое роутинг в Angular?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Процесс настройки базы данных.",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Механизм управления навигацией в приложении.",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "Способ аутентификации пользователей.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Особенности интерфейса пользователя.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 7,
      "text": "Что такое dependency injection (DI) в Angular?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Механизм, позволяющий создавать зависимости между компонентами.",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Способ внедрения зависимостей в компоненты и сервисы.",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "Процесс создания копий компонентов.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Особенность структуры данных.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 8,
      "text": "Как создать новый проект Angular?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Использовать команду 'create-angular-app'.",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Использовать инструмент Angular CLI и выполнить команду 'ng new project-name'.",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "Скачать готовый проект с официального сайта Angular.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Использовать Node.js для создания проекта.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 9,
      "text": "Какой файл используется для настройки маршрутов в Angular?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "app.module.ts",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "routes.config.js",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "app-routing.module.ts",
          "isCorrect": true
        },
        {
          "id": 4,
          "text": "angular.json",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 10,
      "text": "Что такое Angular CLI?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Интерфейс для разработки мобильных приложений.",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Инструмент командной строки для упрощения разработки приложений на Angular.",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "Фреймворк для создания мобильных игр.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Среда разработки для Angular.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 11,
      "text": "Какой компонент используется для обработки ошибок в Angular?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "ErrorBoundary",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "CatchError",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "ErrorWrapper",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "ErrorCatcher",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 12,
      "text": "Какой (какие) аргумент(ы) принимает хук useMemo?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Функцию и массив зависимостей",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Функцию и объект опций",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Функцию",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Массив зависимостей",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 13,
      "text": "Для чего используется хук useCallback в Angular?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Создания ссылок на DOM элементы",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Хранения состояния компонента",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Выполнения побочных эффектов",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Мемоизации функций",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 14,
      "text": "Что такое Angular Material?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Система для создания мобильных приложений на Angular.",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Библиотека пользовательского интерфейса для Angular, предоставляющая готовые компоненты и стили.",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "Инструмент для анализа производительности Angular-приложений.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Модуль для взаимодействия с веб-серверами в Angular.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 15,
      "text": "Что такое AOT (Ahead-of-Time) компиляция в Angular?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Механизм для оптимизации работы приложений на Angular.",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Процесс компиляции Angular-приложения до его запуска в браузере.",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "Инструмент для анализа производительности Angular-приложений.",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Библиотека для работы с асинхронными операциями в Angular.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 16,
      "text": "Какой оператор используется для обработки асинхронных событий в Angular?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "if-else оператор",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "for цикл",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "async/await оператор",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "rxjs операторы, такие как switchMap и subscribe",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 17,
      "text": "Что такое Angular Universal?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Сервис для управления состоянием компонентов в Angular.",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Библиотека для создания мобильных приложений на Angular.",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Фреймворк для серверного рендеринга Angular-приложений.",
          "isCorrect": true
        },
        {
          "id": 4,
          "text": "Система для многопоточной обработки данных.",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 18,
      "text": "Как работает обнаружение изменений (change detection) в Angular?",
      "hasOptions": false,
      "answer": "Обнаружение изменений в Angular - это механизм, который автоматически обновляет представление при изменении данных. Он основан на зонах (zones) и маркерах изменений (change markers)."
    },
    {
      "id": 19,
      "text": "Что такое асинхронный код (asynchronous code) в Angular и как его обрабатывать?",
      "hasOptions": false,
      "answer": "Асинхронный код в Angular - это код, который выполняется вне основного потока выполнения. Для его обработки используются промисы, async/await и RxJS."
    },
    {
      "id": 20,
      "text": "Как настроить международизацию (internationalization) в Angular?",
      "hasOptions": false,
      "answer": "Для настройки международизации в Angular, вы можете использовать модуль @ngx-translate/core или @angular/localize. Они позволяют локализовать приложение для разных языков и регионов."
    }
  ]
}